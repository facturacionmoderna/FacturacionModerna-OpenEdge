/* Inicia Codigo */
        
/* Variables para crear la conexión y timbrado */
DEFINE VARIABLE hWebService AS HANDLE NO-UNDO.
DEFINE VARIABLE hTimbrado_ManagerPort AS HANDLE NO-UNDO.
DEFINE VARIABLE request AS LONGCHAR NO-UNDO.
DEFINE VARIABLE return1 AS LONGCHAR NO-UNDO.

/* Variables para leer el XML de Respuesta */
DEFINE VARIABLE hResponse AS HANDLE.
CREATE X-DOCUMENT hResponse.
DEFINE VARIABLE hRootNode AS HANDLE.
CREATE X-NODEREF hRootNode.
DEFINE VARIABLE ix AS INT INITIAL 0.
DEFINE VARIABLE lGood AS LOGICAL NO-UNDO.
DEFINE VARIABLE hNoderef AS HANDLE  NO-UNDO.
CREATE X-NODEREF hNoderef.

/* Variables que contendran la informacion del XML y PDF codificada en base 64 */
DEFINE VARIABLE xmlb64 AS LONGCHAR.
DEFINE VARIABLE pdfb64 AS LONGCHAR.
DEFINE VARIABLE cbbb64 AS LONGCHAR.
DEFINE VARIABLE txtb64 AS LONGCHAR.

/* Variables para extraer la informacion de los nodos de la respuesta */
DEFINE VARIABLE hNodeXML AS HANDLE  NO-UNDO.
CREATE X-NODEREF hNodeXML.
DEFINE VARIABLE hNodePDF AS HANDLE  NO-UNDO.
CREATE X-NODEREF hNodePDF.
DEFINE VARIABLE hNodeCBB AS HANDLE  NO-UNDO.
CREATE X-NODEREF hNodeCBB.
DEFINE VARIABLE hNodeTXT AS HANDLE  NO-UNDO.
CREATE X-NODEREF hNodeTXT.
        
/* 

Creacion de los parametros enviados al Web Service 
El nodo text2CFDI es el XML del cual se quiere generar el comprobante, codificado en base 64

*/
request = "<requestTimbrarCFDI>
                <UserPass>b9ec2afa3361a59af4b4d102d3f704eabdf097d4</UserPass>
                <UserID>UsuarioPruebasWS</UserID>
                <emisorRFC>ESI920427886</emisorRFC>
                <text2CFDI>77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxjZmRpOkNvbXByb2JhbnRlIHhtbG5zOmNmZGk9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMyLnhzZCIgdmVyc2lvbj0iMy4yIiBmZWNoYT0iMjAxMy0xMS0wOFQxMDoxMToxMiIgc3ViVG90YWw9IjEwLjAwIiBkZXNjdWVudG89IjAuMDAiIHRvdGFsPSIxMS42MCIgTW9uZWRhPSJNWE4iIGNvbmRpY2lvbmVzRGVQYWdvPSJDb250YWRvIiB0aXBvRGVDb21wcm9iYW50ZT0iaW5ncmVzbyIgbm9DZXJ0aWZpY2Fkbz0iMjAwMDEwMDAwMDAyMDAwMDAxOTIiIGNlcnRpZmljYWRvPSJNSUlFUmpDQ0F5NmdBd0lCQWdJVU1qQXdNREV3TURBd01EQXlNREF3TURBeE9USXdEUVlKS29aSWh2Y05BUUVGQlFBd2dnRmNNUm93R0FZRFZRUUREQkZCTGtNdUlESWdaR1VnY0hKMVpXSmhjekV2TUMwR0ExVUVDZ3dtVTJWeWRtbGphVzhnWkdVZ1FXUnRhVzVwYzNSeVlXTnB3N051SUZSeWFXSjFkR0Z5YVdFeE9EQTJCZ05WQkFzTUwwRmtiV2x1YVhOMGNtRmphY096YmlCa1pTQlRaV2QxY21sa1lXUWdaR1VnYkdFZ1NXNW1iM0p0WVdOcHc3TnVNU2t3SndZSktvWklodmNOQVFrQkZocGhjMmx6Ym1WMFFIQnlkV1ZpWVhNdWMyRjBMbWR2WWk1dGVERW1NQ1FHQTFVRUNRd2RRWFl1SUVocFpHRnNaMjhnTnpjc0lFTnZiQzRnUjNWbGNuSmxjbTh4RGpBTUJnTlZCQkVNQlRBMk16QXdNUXN3Q1FZRFZRUUdFd0pOV0RFWk1CY0dBMVVFQ0F3UVJHbHpkSEpwZEc4Z1JtVmtaWEpoYkRFU01CQUdBMVVFQnd3SlEyOTViMkZqdzZGdU1UUXdNZ1lKS29aSWh2Y05BUWtDRENWU1pYTndiMjV6WVdKc1pUb2dRWEpoWTJWc2FTQkhZVzVrWVhKaElFSmhkWFJwYzNSaE1CNFhEVEV5TVRBeU1qSXdORGd3TmxvWERURTJNVEF5TWpJd05EZ3dObG93Z2NBeElUQWZCZ05WQkFNVEdFVkVTVlJQVWtsQlRDQlRTVk5VUVNCVFFTQkVSU0JEVmpFaE1COEdBMVVFS1JNWVJVUkpWRTlTU1VGTUlGTkpVMVJCSUZOQklFUkZJRU5XTVNFd0h3WURWUVFLRXhoRlJFbFVUMUpKUVV3Z1UwbFRWRUVnVTBFZ1JFVWdRMVl4SlRBakJnTlZCQzBUSEVWVFNUa3lNRFF5TnpnNE5pQXZJRWhGUjFRM05qRXdNRE0wVXpJeEhqQWNCZ05WQkFVVEZTQXZJRWhGUjFRM05qRXdNRE5OUkVaU1RrNHdPVEVPTUF3R0ExVUVDeE1GUVcxcFoyRXdnWjh3RFFZSktvWklodmNOQVFFQkJRQURnWTBBTUlHSkFvR0JBSzZZcUFnM0xIT1BwQUtEOU9Ga2NOZ0I1d2orM2s0b0hQSzNiRmZrdTRUQ0Vzd3RNaEl0NUxuWkN0NFVLMGNwOVNZcEtNYTJrWlZZbTZrNnpwaFdnOWJ6djNwdkh3dDltQjZrRkd5QXBVNzFjT2sxNnVucUwyby9wRGo2NXpOdFVCZkR5S2tLQlVHUU1ZZ3RxdlZxNmFYSmlwcUtPUy9Oc0RLRVV0MHExZ2hUQWdNQkFBR2pIVEFiTUF3R0ExVWRFd0VCL3dRQ01BQXdDd1lEVlIwUEJBUURBZ2JBTUEwR0NTcUdTSWIzRFFFQkJRVUFBNElCQVFDZ0NDcFlEYm1OOG5wTFg2dkhDRUpBRi8xRzNLaHVBR1k0OHdWdDF2YTFZWFJ5NnlqK3RKWjlIWjNsOFRZN0o2bjEwWGtyYnplZE9Bckt5amRwZnFXYk5hYlpIdzZiMklsU044SHJIbGlpQUVvcjVod1RVSm5rZzZTMW5tMG1taXJJbnhDbVdvVlYrcXJFWC9YSHlsSitPaklxbC9HeVpySDlzRVBDWStMWUZmVmhPMFU3M2pLcWFqTUVlWnRXWXE1d3JvNFVoUFVobFlnd2hselVONlhOV3RpQzhvaGpFNlFKYWY4allSc0pqSHJhWkwyNTdPMW81VC8zVUxNSmhBU043UjIxMUZteUF1aVlzcThIM2J1UEUwa2wrRW1OOERVTnBURGtCOVhmMWJhNmdYWjBQUlhGMW9HVXd4dlg5RmlJNWVJYXUyUkxmeTlBZkpQY3BBWE4iIGZvcm1hRGVQYWdvPSJQQUdPIEVOIFVOQSBTT0xBIEVYSElCSUNJT04iIG1ldG9kb0RlUGFnbz0iVHJhbnNmZXJlbmNpYSBFbGVjdHJvbmljYSIgTnVtQ3RhUGFnbz0iTm8gaWRlbnRpZmljYWRvIiBMdWdhckV4cGVkaWNpb249Ik51ZXZvIExlb24sIE1leGljby4iIHNlbGxvPSJsUnU4WVpEUGpsSGJPUVV2QmRhK1l2ZnB2QlBGeW1Jd2ZpbnJZMUdyZTVyZmVtMDlsa2k4RHJNMkw4cVZ6Q2JhYUJ3NHNwMDAwQWdYaGg3ek9CcWpRRUNNVnhrbzRsU0JmZ2l6RGJZU244bEwydDAzQnpJNEJwQW52eStPVVVCMllYK2E5ZXZHKytoWS9ZMzR2bXQwVzlUdXZjcVJ0MldBNms2UE5RMW9ubjg9Ij4NCiAgPGNmZGk6RW1pc29yIG5vbWJyZT0iRU1QUkVTQSBERSBNVUVTVFJBIFMuQSBkZSBDLlYuIiByZmM9IkVTSTkyMDQyNzg4NiI+DQogICAgPGNmZGk6RG9taWNpbGlvRmlzY2FsIGNhbGxlPSJDYWxsZSIgbm9FeHRlcmlvcj0iTnVtZXJvIEV4dC4iIG5vSW50ZXJpb3I9Ik51bWVybyBJbnQuIiBjb2xvbmlhPSJDb2xvbmlhIiBsb2NhbGlkYWQ9IkxvY2FsaWRhZCIgbXVuaWNpcGlvPSJNdW5pY2lwaW8iIGVzdGFkbz0iTnVldm8gTGVvbiIgcGFpcz0iTWV4aWNvIiBjb2RpZ29Qb3N0YWw9IjY2MjYwIiAvPg0KICAgIDxjZmRpOkV4cGVkaWRvRW4gY2FsbGU9IkNhbGxlIHN1Y3Vyc2FsIiBtdW5pY2lwaW89Ik51ZXZvIExlb24iIGVzdGFkbz0iTnVldm8gTGVvbiIgcGFpcz0iTWV4aWNvIiBjb2RpZ29Qb3N0YWw9Ijc3MDAwIiAvPg0KICAgIDxjZmRpOlJlZ2ltZW5GaXNjYWwgUmVnaW1lbj0iUkVHSU1FTiBHRU5FUkFMIERFIExFWSIgLz4NCiAgPC9jZmRpOkVtaXNvcj4NCiAgPGNmZGk6UmVjZXB0b3Igbm9tYnJlPSJQw7pCTElDTyBFTiBHw6lORVJBTCIgcmZjPSJYQVhYMDEwMTAxMDAwIj4NCiAgICA8Y2ZkaTpEb21pY2lsaW8gY2FsbGU9IkNhbGxlIiBub0V4dGVyaW9yPSJOdW0uIEV4dCIgY29sb25pYT0iQ29sb25pYSIgbG9jYWxpZGFkPSJTYW4gUGVkcm8gR2FyemEgR2FyY2lhIiBlc3RhZG89Ik51ZXZvIExlb24iIHBhaXM9Ik1leGljbyIgY29kaWdvUG9zdGFsPSI2NjI2MCIgLz4NCiAgPC9jZmRpOlJlY2VwdG9yPg0KICA8Y2ZkaTpDb25jZXB0b3M+DQogICAgPGNmZGk6Q29uY2VwdG8gY2FudGlkYWQ9IjEiIHVuaWRhZD0iTm8gYXBsaWNhIiBkZXNjcmlwY2lvbj0iU2VydmljaW8gUHJvZmVzaW9uYWwiIHZhbG9yVW5pdGFyaW89IjEwLjAwIiBpbXBvcnRlPSIxMC4wMCIgLz4NCiAgPC9jZmRpOkNvbmNlcHRvcz4NCiAgPGNmZGk6SW1wdWVzdG9zIHRvdGFsSW1wdWVzdG9zVHJhc2xhZGFkb3M9IjEuNjAiPg0KICAgIDxjZmRpOlRyYXNsYWRvcz4NCiAgICAgIDxjZmRpOlRyYXNsYWRvIGltcHVlc3RvPSJJVkEiIHRhc2E9IjE2LjAwIiBpbXBvcnRlPSIxLjYwIiAvPg0KICAgIDwvY2ZkaTpUcmFzbGFkb3M+DQogIDwvY2ZkaTpJbXB1ZXN0b3M+DQo8L2NmZGk6Q29tcHJvYmFudGU+</text2CFDI>
                <generarTXT>false</generarTXT>
                <generarPDF>false</generarPDF>
                <generarCBB>false</generarCBB>
          </requestTimbrarCFDI>
          ".

/* Crear el servidor */
CREATE SERVER hWebService.

/* Crear la conexion con el Web service */
hWebService:CONNECT("-WSDL 'https://t1demo.facturacionmoderna.com/timbrado/wsdl'").

/* Conectarse utilizando el puerto Timbrado_ManagerPort al Web Service */
RUN Timbrado_ManagerPort SET hTimbrado_ManagerPort ON hWebService.

/* Ejecutar Timbrado */
RUN requestTimbrarCFDI IN hTimbrado_ManagerPort(INPUT request, OUTPUT return1) NO-ERROR.

IF VALID-HANDLE(ERROR-STATUS:ERROR-OBJECT-DETAIL) THEN DO:
  MESSAGE ERROR-STATUS:ERROR-OBJECT-DETAIL:SOAP-FAULT-STRING VIEW-AS ALERT-BOX.
END.
ELSE DO:
  hResponse:LOAD("LONGCHAR", return1, false).
          
  /* Guardar  Response a un archivo para su analisis */
  hResponse:SAVE("FILE", "C:\OpenEdge\WRK\response.xml").
  hResponse:GET-DOCUMENT-ELEMENT(hRootNode).

  /* Obtener valores devueltos */
  REPEAT ix = 1 TO hRootNode:NUM-CHILDREN:
    lGood = hRootNode:GET-CHILD(hNoderef, ix).
    IF hNoderef:SUBTYPE <> "element" THEN NEXT.
    IF hNoderef:NAME = "xml" THEN DO:
       lGood = hNoderef:GET-CHILD(hNodeXML, 1).
       xmlb64 = hNodeXML:NODE-VALUE.
    END.
    IF hNoderef:NAME = "pdf" THEN DO:
       lGood = hNoderef:GET-CHILD(hNodePDF, 1).
       pdfb64 = hNodePDF:NODE-VALUE.
    END.
    IF hNoderef:NAME = "png" THEN DO:
       lGood = hNoderef:GET-CHILD(hNodeCBB, 1).
       cbbb64 = hNodeCBB:NODE-VALUE. 
    END. 
    IF hNoderef:NAME = "txt" THEN DO:
       lGood = hNoderef:GET-CHILD(hNodeTXT, 1).
       txtb64 = hNodeTXT:NODE-VALUE.
    END.           
  END.
END.
/* Termina Codigo */
